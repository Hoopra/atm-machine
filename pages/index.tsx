import Head from 'next/head';
import React, { useState } from 'react';

import { WithdrawalInput } from '@lib/components/WithdrawalInput';
import styled from 'styled-components';
import { calculateCashReturn, CashQuantity, restockATM, withdrawFromStock } from '@lib/util/cashCalculator';
import { PayoutSlots } from '@lib/components/PayoutSlots';
import { Button } from '@lib/components/generic/Button';
import { generateResponse } from '@lib/userResponse';
import { CurrentStock } from '@lib/components/Stock';
import { generateRandomIntegerBetween } from '@lib/util/generic';

const Main = styled.main({
  padding: '2rem 0',
  margin: '2rem 0',
  display: 'flex',
  flex: 1,
  flexDirection: 'column',
  justifyContent: 'center',
  alignItems: 'center',
});

const Heading = styled.h1({ margin: '24px 0' });

const Response = styled.div({
  fontSize: '18px',
  color: 'grey',
  margin: '16px 0',
});

type ATMState = {
  machineNumber?: number;
  stock: CashQuantity;
  payout?: CashQuantity;
  error?: string;
};

const generateMachineNumber = () => generateRandomIntegerBetween(1, 1e6);

export default function Index() {
  const [cashState, setCashState] = useState<ATMState>({
    stock: restockATM(),
    machineNumber: generateMachineNumber(),
  });

  const { payout, stock, error, machineNumber } = cashState;

  const onWithdraw = (withdrawal: number) => {
    const payout = calculateCashReturn(withdrawal, stock);
    setCashState({
      payout,
      error: payout ? undefined : `Stock insufficient for withdrawal - sorry`,
      stock: payout ? withdrawFromStock(stock, payout) : stock,
    });
  };

  const onRestock = () =>
    setCashState({
      stock: restockATM(),
      payout: undefined,
      machineNumber: generateMachineNumber(),
    });

  return (
    <div>
      <Head>
        <title>World's Best ATM #{machineNumber}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Main>
        <Heading>World's best ATM #{machineNumber}</Heading>
        <PayoutSlots payout={payout} />
        <Response>{error ? error : Object.keys(payout || {}).length ? generateResponse() : <>&nbsp;</>}</Response>

        <WithdrawalInput onWithdraw={onWithdraw} />
        <Button onClick={onRestock}>Find another ATM</Button>
        <CurrentStock stock={stock} />
      </Main>
    </div>
  );
}
